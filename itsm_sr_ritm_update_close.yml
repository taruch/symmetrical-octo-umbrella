---
- name: Update ServiceNow record
  hosts: localhost
  gather_facts: false
  # Define all the ServiceNow variables in one place for easy editing
  vars:
    request_number: "{{ ticket_number }}"  # <-- The Request number to close
    close_notes: "Request completed and resolved via Ansible automation."
    instance_data:
      host: "{{ lookup('env', 'SN_HOST') | default(omit) }}"
      username: "{{ lookup('env', 'SN_USERNAME') | default(omit) }}"
      password: "{{ lookup('env', 'SN_PASSWORD') | default(omit) }}"

  tasks:
    - name: "Get sys_id for Request {{ request_number }}"
      servicenow.itsm.api_info:
        instance: "{{ instance_data }}"
        resource: sc_request  # The table for Service Requests
        sysparm_query: "number={{ request_number }}"
        columns: "sys_id" # We only need the sys_id for the next query
      register: req_info

    - name: Debug Request Info
      ansible.builtin.debug:
        var: req_info.record[0].sys_id
        verbosity: 2

    - name: Fail if parent Request was not found
      ansible.builtin.fail:
        msg: "Could not find a Service Request with the number '{{ request_number }}'."
      when: req_info.record | length == 0

    - name: "Find RITMs associated with Request {{ request_number }}"
      servicenow.itsm.api_info:
        instance: "{{ instance_data }}"
        resource: sc_req_item  # Now query the Requested Item table
        sysparm_query: "request={{ req_info.record[0].sys_id }}" # Find RITMs where the 'request' field matches the parent's sys_id
        columns: "number" # We only need the human-readable number
      register: ritm_info

    - name: Debug RITM Info
      ansible.builtin.debug:
        var: ritm_info
        verbosity: 2

    - name: Fail if no RITMs were found for the Request
      ansible.builtin.fail:
        msg: "Found Service Request '{{ request_number }}', but it has no associated Requested Items."
      when: ritm_info.record | length == 0

    - name: Set RITM number as a fact
      ansible.builtin.set_fact:
        ritm_number: "{{ ritm_info.record[0].number }}"

    - name: Display the found RITM number
      ansible.builtin.debug:
        msg: "Found RITM(s) for {{ request_number }}: {{ ritm_number }}"
        verbosity: 1

    - name: "Get sys_id for RITM {{ ritm_number }}"
      servicenow.itsm.api_info:
        instance: "{{ instance_data }}"
        resource: sc_req_item  # The table for Requested Items
        sysparm_query: "number={{ ritm_number }}" # ServiceNow query string
        columns: "sys_id"      # Comma-separated list of fields to return
      register: ritm_details

    - name: Fail if RITM was not found
      ansible.builtin.fail:
        msg: "Could not find a Requested Item with the number '{{ ritm_number }}'."
      when: ritm_details.record | length == 0

    - name: Display the discovered sys_id
      ansible.builtin.debug:
        msg: "The sys_id for {{ ritm_number }} is: {{ ritm_details.record[0].sys_id }}"

    - name: Create a comment fact with information about created VM
      ansible.builtin.set_fact:
        comment_lines:
          - "Automated process has successfully completed all tasks. This item will now be closed."
          - ""
          - "Power Status: {{ new_vm_info.hw_power_status }}"
          - "Guest Full Name: {{ new_vm_info.hw_guest_full_name }}"
          - "Processor Count: {{ new_vm_info.hw_processor_count }}"
          - "Cores per Socket: {{ new_vm_info.hw_cores_per_socket }}"
          - "Memory Total (MB): {{ new_vm_info.hw_memtotal_mb }}"
          - "Guest Tools Status: {{ new_vm_info.guest_tools_status }}"
          - "IPv4 Address: {{ new_vm_info.ipv4 }}"

    - name: "Add closing comment to RITM {{ ritm_number }}"
      servicenow.itsm.api:
        instance: "{{ instance_data }}"
        action: patch
        resource: sc_req_item
        sys_id: "{{ ritm_details.record[0].sys_id }}"
        data:
          comments: "{{ comment_lines | join('\n') }}"
          state: "3"
          close_notes: "{{ close_notes }}"

    - name: "Close Parent Request"
      servicenow.itsm.api:
        instance: "{{ instance_data }}"
        action: patch
        resource: sc_request
        sys_id: "{{ req_info.record[0].sys_id }}"
        data:
          request_state: "closed_complete"
          close_notes: "{{ close_notes }}"
      register: request_update

    - name: Display final request update result
      ansible.builtin.debug:
        var: request_update.record

...
